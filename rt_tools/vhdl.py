from decorator import contextmanager
import networkx as nx
import sys
import os.path
from os import path
import lcm
from lcm import lcm
import pktgen
from pktgen import pktGen
from pktgen import extractFlows
from pktgen import getPacketsFromFlows
import routing
from routing import getNumFlits
import mapping
from mapping import getMap
from mapping import parseMap

DEBUG = True
LOCATION = os.path.dirname(os.path.realpath(__file__)) + "/../pkt-sim/packets/"

# extract the time which each packet must be injected into the network
# from the given output file generated by minizinc
def extractStart(startfile):

  lines = []
  with open(startfile) as f:
    lines = f.read().splitlines() 

  if DEBUG == True:
    print("=========================== MINIZINC OUTPUT")
    for l in lines:
      print(l)

  # create an start vector filled with '-1'
  starts = [0 for x in range(len(lines[0].split('\t')))]
  i = 0
  for j in starts:
    starts[i] = -1
    i = i + 1

  # for all packets, capture the least start time for all links
  for l in lines:
    line = split = l.split('\t')
    j = 0
    for ll in line:
      if int(ll) != -1:
        if starts[j] == -1:
          starts[j] = int(ll)
        elif int(ll) < starts[j]:
          starts[j] = int(ll)
      j = j + 1

  return starts


def getPacketsBySource(app, mapping, packets, starts):

  vhdl_pkts = []

  # packets
  i = 0
  for p in packets:

    # TODO: check whether -2 is necessary due to the protocol
    num_flits = getNumFlits(p["datasize"]) 

    # locate target and destination nodes by ID
    for n in app.nodes(data=True):
      id, data = n
      if id == p["source"]:
        sourceTaskName = data["label"]
      if id == p["target"]:
        targetTaskName = data["label"]

    sourceNode = getMap(sourceTaskName, mapping)
    targetNode = getMap(targetTaskName, mapping)
   
    # pkt deadline
    deadline = p["abs_deadline"]
  
    # packet alias
    pkt_name = p["name"]
    
    # add packet to the list
    vhdl_pkts.append({
      "release" : starts[i], 
      "source"  : sourceNode, 
      "target"  : targetNode, 
      "size"    : num_flits, 
      "name"    : pkt_name,
      "deadline": deadline
    })
    i = i + 1

  def elem2(e):
    return e["source"]

  vhdl_pkts.sort(key = elem2, reverse = True)
  return vhdl_pkts

def generateSimulationInputFiles(vhdl_packets, location):

  current_source = None
  entry_format = "{release} {size} {target} {deadline}\n"

  file_contents = []

  def saveContents():
    with open(location + current_source + ".txt", "w+") as file:  #TODO: fix path malformation
      for c in file_contents:
        file.write(entry_format.format(
          release = str(c["release"]),
          size = c["size"],
          target = c["target"],
          deadline = c["deadline"]
        ))

  for p in vhdl_packets:

    # save file if (i) source has changed or (ii) the last packets is being processed
    if p["source"] != current_source:

      if current_source != None:
        saveContents()
      current_source = p["source"]
      file_contents = []

    file_contents.append(p)

    if p == vhdl_packets[-1]:
      saveContents()






# generate a list of packets from models
def exportVhdl(appfile, mapfile, archfile, startfile):

  if not path.exists(appfile):
    print("unable to read application file")
    exit(0)

  if not path.exists(mapfile):
    print("unable to read mapping file")
    exit(0)

  if not path.exists(archfile):
    print("unable to read architecture file")
    exit(0)

  if not path.exists(startfile):
    print("unable to read given minizinc output file")
    exit(0)

  arch = nx.read_gml(archfile) # read topology file (architecture)
  mapping = parseMap(mapfile)  # read mapping file (node-to-tasks)
  app = nx.read_gml(appfile)   # read application model
  
  # locate flows within application
  flows = extractFlows(app.edges(data=True))

  # calculate hyperperiod
  periods = []
  for f in flows:
    periods.append(f["period"])
  hp = lcm(periods)

  # get packets from flows
  packets = getPacketsFromFlows(flows, hp)
 
  # extract start times from minizinc file
  starts = extractStart(startfile)

  # get packets sorted by source 
  vhdl_packets = getPacketsBySource(app, mapping, packets, starts)

  # generate input files for injector
  generateSimulationInputFiles(vhdl_packets, LOCATION)

  for p in vhdl_packets:
    print(p)

  print("Simulation input files exported to '", LOCATION, "'")