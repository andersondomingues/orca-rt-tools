import networkx as nx
import sys
import os.path
from os import path
import lcm
from lcm import lcm
import pktgen
from pktgen import pktGen
from pktgen import extractFlows
from pktgen import getPacketsFromFlows
import routing
from routing import getNumFlits
import mapping
from mapping import getMap
from mapping import parseMap

DEBUG = True

# extract the time which each packet must be injected into the network
# from the given output file generated by minizinc
def extractStart(startfile):

  lines = []
  with open(startfile) as f:
    lines = f.read().splitlines() 

  if DEBUG == True:
    print("=========================== MINIZINC OUTPUT")
    for l in lines:
      print(l)

  # create an start vector filled with '-1'
  starts = [0 for x in range(len(lines[0].split('\t')))]
  i = 0
  for j in starts:
    starts[i] = -1
    i = i + 1

  # for all packets, capture the least start time for all links
  for l in lines:
    line = split = l.split('\t')
    j = 0
    for ll in line:
      if int(ll) != -1:
        if starts[j] == -1:
          starts[j] = int(ll)
        elif int(ll) < starts[j]:
          starts[j] = int(ll)
      j = j + 1

  return starts


# generate a list of packets from models
def exportVhdl(appfile, mapfile, archfile, startfile):

  if not path.exists(appfile):
    print("unable to read application file")
    exit(0)

  if not path.exists(mapfile):
    print("unable to read mapping file")
    exit(0)

  if not path.exists(archfile):
    print("unable to read architecture file")
    exit(0)

  if not path.exists(startfile):
    print("unable to read given minizinc output file")
    exit(0)

  arch = nx.read_gml(archfile) # read topology file (architecture)
  mapping = parseMap(mapfile)  # read mapping file (node-to-tasks)
  app = nx.read_gml(appfile)   # read application model
  
  # locate flows within application
  flows = extractFlows(app.edges.items())

  # calculate hyperperiod
  periods = []
  for f in flows:
    periods.append(f["period"])
  hp = lcm(periods)

  # get packets from flows
  packets = getPacketsFromFlows(flows, hp)
 
  # extract start times from minizinc file
  starts = extractStart(startfile)

  print()
  print("------------------------- PKT TABLE (VHDL SIM) ALT")

  # constant header 
  print()
  print("  constant tp : tpacket := (")
  print("  -- start  size  src  tgt  deadline ")

  # packets
  i = 0
  for p in packets:
    print("    (", end = '')

    # min start
    print(starts[i], end = '')
    print(", ", end = '')

    # remove header and size flits from vhdl input
    print(getNumFlits(p["datasize"]) -2, end = '') 
    print(", ", end = '')

    # source and target nodes
    sourceNode = getMap(p["source"], mapping)
    targetNode = getMap(p["target"], mapping)      
    print(sourceNode, end = '')
    print(", ", end = '')
    print(targetNode, end = '')
    print(", ", end = '')

    # pkt deadline
    print(p["abs_deadline"], end = '')

    # trailing comma 
    if i == len(packets) - 1:
      print(")", end = '')
    else:
      print("),", end = '')
     
    # packet alias
    print("  --", p["name"])
    i = i + 1

  print("  );")
  print()
